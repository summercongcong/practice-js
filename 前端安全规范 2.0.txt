前端安全规范 2.0
撰写人：安全风控 @李建熠  互娱前端 @高阳 
编码规范: 前端安全编码规范 
英文版：Front end security specification 2.0 
1 背景
本文档的目标是提高大家的安全意识、保障前端工程的安全，针对常见安全攻击手段输出防范方法，避免出现安全风险。
2 Server API / 页面 服务安全
2.1 [强制] 开启 HTTPS 服务
增强传输过程的安全性，避免出现内容劫持。避免在HTTPS页面中引入HTTP协议的元素，如img、link等，如此不仅会造成页面警告，某些浏览器，如Chrome、Safari，甚至会停止页面加载，造成页面BUG，严重影响客户体验，还会造成敏感信息的泄漏。
2.2 [强制] 正确启用 Gulu 安全套件
Gulu安全套件对以下常见的安全问题提供了解决方案
  1. XSS
  2. CSRF
  3. XST
  4. 钓鱼
  5. HPP
  6. SSRF
  7. CORS  
  8. SQL
套件会开启常用的 HTTP header 安全相关字段，如
  - Strict-Transport-Security： 强制开启安全连接 (over SSL/TLS)
  - X-Frame-Options： 避免点击劫持
  - X-XSS-Protection： 避免跨站攻击
同时也在主动对抗方面提供了支持。
Gulu 项目必须启用 Gulu 安全套件，对于其他 express、koa 项目，推荐启用 helmet / koa-helmet 安全中间件。
落地保障：Argus 对 Server 项目开启扫猫，确保安全套件开启。
2.3 [强制] 所有服务都要经过数据脱敏，接入接口敏感信息扫描平台
- 参考 敏感数据与敏感服务定义 对所有 API 接口进行数据脱敏。
- 线上服务参照 开启Mesh流程 开启 Mesh，参照 接口检测接入文档 接入 接口敏感信息扫描平台，会进行敏感数据扫描。
落地保障：Argus 对 TCE 服务开启扫猫，确保配置正确。
2.4 [强制] 正确配置 Cookie
SameSite属性介绍：
- Strict：完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。换言之，只有当前网页的 URL 与请求目标一致，才会带上 Cookie。
- Lax：大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外，包括链接，预加载请求，GET 表单。
- None：关闭SameSite功能。
根据使用场景给 Cookie 配置更安全的策略，防止 Cookie 信息泄露，如：
- Secure - 只允许 Cookie 通过 HTTPS 协议传输
- HttpOnly - 可以帮助抵抗 XSS、 CSRF 攻击，不允许 Cookie 被前端 JS 读取
- domain - 合理使用同源策略，配置 Cookie 所属域
- path - 在同源策略基础上，限制只允许特定 path 下页面进行 Cookie 操作
- expires - 合理设置过期时间，降低安全风险
- SameSite - 该属性用来限制第三方应用来加载本Cookie，从而减少安全风险，建议设置为Lax。
- 严禁在cookie中写入敏感数据。
落地保障：安全组对接口进行 Request 黑盒扫描。
2.5 [强制] 禁止将错误栈通过接口返回，外抛给客户端，防止泄露系统内部信息
2.6 [强制] 非HTML页面的 Content-Type 禁止配置为 text/html。
非HTML页面的 Content-Type 配置为 text/html 很有可能被用于XSS等攻击。如一个 JSON 接口，返回的内容为 {"msg": "<script>alert(1)</script>"} ，一旦 Content-Type 错误配置为text/html，浏览器将作为HTML解析，导致XSS攻击成功。
2.7 [建议] 对关键 API 写好安全测试，线上服务保证单测 100% 通过
单元测试对需要长期维护项目的稳定性提供强有力的保障，针对安全问题写安全测试，有利于保障线上服务的安全性。一个方向是针对特定边界 Case 校验 API 的输出是否存在安全隐患(如检查 header 字段配置是否安全)；另一个方向是 Function 维度的单元测试（如用户输入的处理函数是否开启转义等）。
落地保障：Argus 对项目执行单测，暴露单测不通过的问题。
2.8 [建议] 正确使用 CSP（Content Security Policy）
Content Security Policy (CSP) 内容安全策略允许站点管理者控制用户代理能够为指定的页面加载哪些资源。
CSP 可以通过 Content-Security-Policy HTTP header 字段开启
Demo:
Content-Security-Policy: default-src 'self' *.mydomain.com
详情参考 CSP（推荐配合 Gulu 安全套件进行合理配置）
需要注意，开启 CSP 后默认禁止内联脚本和 eval 脚本执行。
2.9 [强制] 身份鉴定
- 敏感信息的定义参考 敏感数据与敏感服务定义 
- 权限控制参考 Kani 权限管理系统用户最佳实践手册 IES权限管理平台接入文档 
对于非公共数据的请求必须对用户的身份进行鉴定，尤其是涉及敏感信息、重要页面的操作，必须确定当前用户是否有权限发起该操作，如数据查询、登陆管理界面等。
2.10 [强制] SQL操作预编译处理
常见orm框架, 如：typeORM、Sequelize、node-orm2 等
执行SQL操作相关操作时，尽量使用ORM框架，必须对语句进行预编译处理，如果某些参数无法使用预编译操作，如表名、order by等，必须使用白名单的方式对相关参数进行过滤，严禁使用SQL拼接的方式。
2.11 [强制] 重定向URL必须进行安全校验
后端在处理页面跳转时，必须对跳转的URL地址进行安全校验，判断跳转地址是否为公司的域名。如果业务需要跳转到非公司域名，必须使用白名单的方式严格限制跳转地址的范围。
2.12 [强制] 上传文件类型必须在后端进行严格校验
html、shell、swf、jsp、php等可能会造成漏洞的文件类型，严禁设置在白名单中。
用户上传文件时，必须在后端对上传文件的类型以白名单的方式进行严格的限制，避免任意文件类型的上传，同时尽量将文件名进行随机化处理，以避免文件名被猜测。
2.13 [强制] 必须使用安全函数对XML文件进行解析
XXE全称XML External Entity Attack，是一种针对应用程序解析XML输入的攻击，当包含外部实体引用的XML输入未进行安全配置的XML解析器处理时，易产生此类攻击。
对XML文件进行解析时，必须使用安全的XML解析函数对XML文件进行解析，特别是处理用户上传的XML文件时，以避免解析到恶意XML文件，造成XXE漏洞。
2.14 [强制] 服务端发起请求时，必须对请求的地址进行安全校验
SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）
当服务端使用用户输入的URL发起请求前，特别是该URL为用户输入时，必须对该URL进行安全校验，避免请求地址为公司内网地址，从而造成服务端请求伪造（SSRF）漏洞。
2.15 [强制] 服务端处理文件时，必须对文件地址进行严格校验
当服务端对用户上传的文件地址进行处理前，必须对该地址进行安全校验，避免地址中存在诸如“../”的特殊字符，从而造成任意文件读取的漏洞。
2.16 [强制] 严禁应用以DUBUG模式上线
2.17 [强制] 敏感数据严禁使用URL参数传递
一些敏感数据，如Session ID、身份证号等，严禁通过URL传递，即使使用HTTPS协议，该方式也是禁止的。
2.18 [强制] 后台类站点认证失败后严禁出现明确的提示信息。
后台类站点在身份认证失败后，应当模糊出错信息，如“登录失败”，“账户名或密码有误”等，避免出现明确的提示信息，如“账户名XXX不存在”、“密码错误”等。
2.19 [强制] 登录/注册页面必须接入验证码（CAPTCHA）或频率控制机制。
公司自研的验证码系统：https://doc.bytedance.net/docs/1411/1565/23384/
未接入验证码（CAPTCHA）或频率控制机制的登录接口可被用户密码暴力破解，可能导致用户认证信息泄漏。类似的，注册页面也能被用于机器自动注册于用户名猜解。因此登录/注册页面必须接入验证码（CAPTCHA）或频率控制机制。
2.20 [强制] 存在多步操作时，应在服务器端严格校验每一步的状态。
为避免绕过，服务端必须严格校验当前步骤的状态。如在执行第三步操作时，必须首先验证当前用户的权限，再验证第二步操作是否正常完成。避免用户直接跳转到第三步，从而引发安全问题。如密码重置功能，必须严格校验每一步的状态，防止用户直接跳转到密码重置页面进行密码重置。
2.21 [强制] 服务器向响应头中写入用户输入的数据时，必须进行CRLF（回车换行）过滤
CRLF是”回车 + 换行”（\r\n）的简称。在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS。
2.22 [建议] 日志安全
此处主要针对日志访问控制，日志记录的相关规范请参考开发规范中的相关规定。
- 应使用操作系统访问控制（ACL）确保日志文件的安全，并限制对日志文件的访问；
- 应将有权限操作日志文件的个人缩减到最小，只为高度信任的账户（如管理员）授予只读访问权限，防止日志被篡改、删除。
- 日志传输过程需支持加密认证机制，数据传输异常中断，系统能够提示、重新传输，保障日志不会丢失。
- 日志记录中禁止包含业务的敏感信息，避免因日志分析导致业务敏感数据泄漏。
2.23 [建议] 关键业务逻辑，特别是涉及资金的逻辑，务必联系安全人员进行安全层面的逻辑评估
2.24 [建议] Web应用需配置Rebots文件，非SEO URL必须配置为禁止爬虫访问
robots.txt（统一小写）是一种存放于网站根目录下的ASCII编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。因为一些系统中的URL是大小写敏感的，所以robots.txt的文件名应统一为小写。robots.txt应放置于网站的根目录下。
搜索引擎优化（英语：search engine optimization，缩写为SEO），是一种透过了解搜索引擎的运作规则来调整网站，以及提高目的网站在有关搜索引擎内排名的方式。
2.25 [建议] 接口安全
加解密算法的解释说明见文末附录4
- 服务端与服务端之间进行接口通信时，需要对相关接口进行签名、验签处理，以避免接口的任意调用，签名算法建议使用RSA2048_SHA256。
- 对于某些用户可控的接口，需要控制访问的频率；如短信、邮件、电话等外呼接口需要限制单位时间内的调用次数，超过调用次数，应当限制访问；评论、投诉等接口，需要限制每次提交的间隔时间，超限提交需要填充验证码，并限制单位天数能够提交的总量。
- 加入接口数据是需要展示的外部数据，需要接入内容安全校验及相关安全校验，如XSS安全函数的处理。
2.26 [建议] 尽量不要使用过时的技术
- 新应用尽量不要使用Flash技术，已经使用Flash技术应用需要尽快废弃；
- 不要使用Silverlight技术；
- 不要使用JSONP技术；
3 Server 存储安全
3.1 [强制] 根据实际应用场景正确接入 KMS 服务
密钥管理服务（Key Management Service）文档目录 
进行代码和数据两个层面的脱敏，防止敏感信息泄露。使用主密钥（RSA 密钥）对代码中敏感信息加解密（如数据库连接信息，其他api的token等）使用数据密钥（ AES 密钥）对数据库中的敏感数据加解密（如生日、地址、手机号、身份证号等）。密钥必须存储在KMS中，严禁硬编码到本地。
落地保障：Argus 对代码进行定期白盒扫描，排查代码中存在的敏感信息。
3.2 [强制] 谨慎处理 TOS 敏感数据存储
TOS 敏感信息链接排查 
从三个方面进行限制：禁止公开、上传加密、访问鉴权
1. 对于存储敏感信息的Bucket，公开访问级别请设置成“私有”，禁止外网公开。
2. 对上传的信息进行加密处理，加密采用KMS。
3. 敏感数据需要通过专门的数据接口提供，该接口需要做必要的用户身份鉴权。
3.3 [强制] 接入的服务要做海内外数据隔离
Slardar、Tea 等服务，需要针对海内外分别进行资源部署，提高资源访问成功率，避免法律风险。
落地保障：Argus 对项目进行白盒扫描，发现海内外服务混布的项目。
3.4 [建议] 谨慎使用临时文件
临时文件使用完毕后自行删除，同时建议设置定时任务定期扫描过期的临时文件进行删除，不然文件的创建会逐渐占用大量的磁盘空间，直到拖垮系统。
备注：曾经出现 TCE 宿主机磁盘被临时文件写满，导致上线时调度缓慢、无法正常上线的情况。可以在 TCE 服务的环境变量中增加 TCE_NO_SHARED_TMP=true 配置，配置后容器会使用自身内存来模拟 /tmp 目录， 临时文件会随服务重启而被清理，需要注意开启这个配置后会额外占用容器自身内存。
3.5 [建议] 使用安全的加解密算法
加解密算法的解释说明见文末附录4
- 对称加密：建议使用AES，密钥长度至少为128位，严禁使用DES进行加解密运算，非多线程运行模式下尽量避免使用ECB填充模式；
- 非对称加密：建议使用RSA，密钥长度至少为2048位；或ECC，密钥长度至少为256位；
- 签名算法：建议使用RSA，密钥长度至少为2048位；
- 摘要算法：建议使用SHA256或SHA512，严禁使用MD5进行Hash运算；
- 完整性校验：建议使用HmacSHA256或HmacSHA512；
4 Server JS代码安全
4.1 [强制] 严格遵守代码规范
JavaScript 代码规范 代码规范校验工具
代码规范可以在代码静态分析阶段就发现一些代码的安全问题，要严格按照规范书写代码，并启用 lint 工具进行检测。
落地保障：Argus 平台扫描保障代码规范的落地。
4.2 [强制] 使用 npm audit 确保所有 node_modules 依赖都是安全的
曾经发生过多起因为误引不安全的第三方模块而导致安全事故的场景，需要对项目引入的三方依赖进行严格的安全管理，充分利用 NPM 提供的安全检测服务。
落地保障：Argus 平台扫描项目，监控 Audit 信息。
4.3 [建议] 不要在代码中执行系统命令，尤其是命令参数用户可控
不要使用调用系统命令的方式实现业务功能，如果确实需要使用系统命令才能完成相关的业务，需要保证执行的系统命令是完全固定的，不能被用户控制。
4.4 [建议] 严禁将用户输入作为代码进行执行，如果必须使用，需要保证代码在沙盒内执行
4.5 [建议]  使用 strict mode
使用严格模式可以降低代码风险，把额外的错误抛出来，如
Undeletable properties
'use strict';
delete Object.prototype; // TypeError
Object literals must be unique
'use strict';
var obj = { 
  a: 1, 
  a: 2 
}; // syntax error
Prohibits with
var obj = { x: 17 };
with (obj) // !!! syntax error
{
}
查看详情 MDN.
落地保障：Argus 平台对 Server 代码进行白盒扫描，暴露不合法问题。
4.6 [建议] 预防正则表达式 DOS 攻击
特定的正则表达式（e）会触发指数级回溯匹配，非常消耗 CPU 资源，拖慢了系统运行速度，这些正则表达式通常会包含重复运算符的嵌套（如  /(a+)+/ 或 /(a|a?)+/）。如果正则表达式来源于用户输入，可以使用 safe-regex 来识别它。
落地保障：Argus 平台对 Server 代码进行白盒扫描，确保 Server 代码中不出现 Evil Regexes 。
5 Client 安全管理
5.1 [建议] 跨域访问第三方接口资源时，不使用 JSONP 方法，而是使用 CORS 协议完成通信
使用 JSONP 访问资源时，页面会执行目标服务器回传的所有 JS 代码，极易受到攻击。
落地保障：Argus 平台对  Client 代码进行白盒扫描，暴露 JSONP 请求情况 。
5.2 [强制] HTML 文件必须使用 UTF-8 编码，<meta charset> 应当指定为 UTF-8
一些旧版本的浏览器可使用UTF-7绕过一些XSS防御机制，历史上也出现过编码不统一导致的安全问题，如GBK编码绕过SQL注入防御。因此，统一编码总归是有利无害的。
落地保障：Argus 平台对  Client 代码进行白盒扫描，对非 UTF-8 编码的 HTML 模板进行报警 。
5.3 [强制] HTML 页面中的标签属性值必须使用 " 标示，禁止使用 ' 或不使用引号
一些HTML实体编码的实现中，并不会对 ' 进行转义，绝大部分实现不会对空格进行转义，导致标签属性值在不使用 " 的情况下，即使进行了实体编码，仍有可能存在XSS漏洞。如<img src=/img/{1}.png>，当{1}的内容为> onerror=alert(1) x时，实际渲染的HTML为<img src=/img/&gt; onerror=alert(1) x.png>，导致XSS。
落地保障：Argus 会对 HTML 模板进行 " 使用校验，暴露不安全的使用情况。
5.4 [强制] 相关信息输出到前端页面时必须经过安全函数的处理
相关安全函数见GULU包中XSS编码的相关函数，后续该部分会单独抽出构建独立的工具包
- HTML输出：将富文本直接在页面中输出时，必须使用相关安全函数进行处理； 
- XML输出：在xml中输出变量，必须使用相关安全函数进行处理；
- URL输出：将变量输出到html标签中要解析源url地址的地方，比如<a href=“”/> <img src=“”/>，必须使用相关安全函数进行处理；
- JS输出：在js中输出变量，必须使用相关安全函数进行处理。
5.5  [建议] HTML页面中除 <script> 标签外的富文本数据，应当执行HTML标签白名单过滤
在处理数据的时候应假定后端传输过来的数据并非绝对可靠（实际上也做不到绝对可靠，后端系统可能存在Bug、当前算法存在绕过可能性、任一系统存在其它安全问题等）。因此，无论是从哪边接收到富文本信息，在进行渲染时建议重新执行一遍HTML白名单过滤。
5.6  [建议] 由用户控制的URL信息应当执行协议白名单过滤，禁止 javascript: 协议
在输出由用户控制的URL信息时，应当执行协议白名单校验，避免出现XSS漏洞。
Example:
<!-- XSS case 1 -->
<a href="javascript:alert(1)">Click Me</a>
<!-- XSS case 2 -->
<script>
    location.href = 'javascript:alert(2)'
</script>
5.7  [建议] 页面中通过 iframe 加载第三方页面时，配置 sandbox 属性来禁用不安全的行为
在 iframe 配置 sandbox 属性后，iframe 将被禁止以下操作：页面导航、执行脚本、显式弹窗、提交表单，同时也会被禁止访问跟主域同源策略相关的任何资源如：Cookie、LocalStorage 等。可以通过以下字段来详细配置 iframe 行为：
- allow-same-origin：设置 iframe 与网站同源
- allow-scripts：允许 iframe 执行脚本
- allow-forms：允许 iframe 提交表单
- allow-pointer-lock：允许锁定鼠标
- allow-popups：允许弹层
- allow-top-navigation：允许页面导航操作
5.8 [建议] 引入第三方库时应当优先采用公司内部提供的基础库
引入第三方包的时候，在公司内部有相关基础库的前提下，应当尽量选用公司内部基础库。在使用新的第三方库前应考虑通知安全部门进行安全评估。
落地保障：Argus 会对项目进行 npm audit 安全审计，暴露不安全的基础库。
 5.9 [强制] 不应面向公网发布 Sourcemap文件
借助 Sourcemap 文件，外部人员可以进一步还原JavaScript文件，大大降低分析 JavaScript 文件的难度。某种程度上，面向公网发布 Sourcemap 文件属于敏感信息泄漏。如果需要兼顾实用性与安全性，可考虑将 Sourcemap 发布到一个仅允许内网访问的服务器上。
5.10 [建议] 在控制台打印提示信息，提示用户不要往控制台粘贴任何代码
在工程化层面构建阶段（如 Eden）自动追加提示信息，无需用户手动编码。
用户可能受到非法网站的恶意误导，诱导用户粘贴恶意代码到控制台中直接盗取用户信息，应对这种情况加以提示。
落地保障：构建时（如使用 Eden）自动追加控制台安全提示。
5.11 [强制] 前端使用用户可控参数执行页面跳转时，跳转地址必须经过后端校验，严禁使用用户输入的地址直接进行跳转。
附录：
附1：规范落地保障
1. Argus 业务研发流程感知平台
进行线上、仓库定期巡检（具备前端代码安全扫描功能，欢迎联系@高阳接入）
- 白盒扫描、黑盒扫描
- 安全报告、消息推送
 
2. WIPEden & SCM 前端构建产物扫描
- 在上线前做最终的代码安全确认，推送扫描报告
 
附2：在线安全扫描工具
- Mozilla 整站安全扫描
- HTTP Header 扫描
附3：手册
- HTML5 Security Cheatsheet
附4：安全加解密算法介绍
- 密码学介绍 
